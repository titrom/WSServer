import os
import json
import time
import threading
from datetime import datetime

# –í–º–µ—Å—Ç–æ asyncio –∏ websockets.asyncio –∏—Å–ø–æ–ª—å–∑—É–µ–º sync –≤–µ—Ä—Å–∏—é
import websockets.sync.server as ws_sync
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

CONFIG_FILE = r"C:\Users\User\Documents\Unreal Projects\RLS\Intermediate\PythonStub\reqwest.json"
connected_clients = []
clients_lock = threading.Lock()

def create_header():
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª–∏–Ω–æ–π 12 –±–∞–π—Ç"""
    header = bytearray(12)
    header[0] = 0x00  # streamType
    header[1] = 0x01  # frameType
    header[2] = 0x00  # serializationFormat (JSON)
    header[3] = 0x00  # gzipCompression (False)

    now_ms = int(datetime.now().timestamp() * 1000)
    header[4:12] = now_ms.to_bytes(8, byteorder='big')
    return header


def load_config():
    """–ß–∏—Ç–∞–µ—Ç JSON –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        json_data = json.dumps(data, ensure_ascii=False).encode('utf-8')
        return create_header() + json_data
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", e)
        return None


def handler(websocket):
    print("üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    with clients_lock:
        connected_clients.append(websocket)

    try:
        initial_data = load_config()
        if initial_data:
            websocket.send(initial_data)
            print("üì® –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É")

        for _ in websocket:
            pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    except Exception as e:
        print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω:", e)
    finally:
        with clients_lock:
            if websocket in connected_clients:
                connected_clients.remove(websocket)


class ConfigFileHandler(FileSystemEventHandler):
    def __init__(self):
        self.last_modified = os.path.getmtime(CONFIG_FILE)

    def on_modified(self, event):
        if event.src_path.endswith(os.path.basename(CONFIG_FILE)):
            current_time = os.path.getmtime(CONFIG_FILE)
            if current_time != self.last_modified:
                print("üîÑ –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                update_data = load_config()
                if update_data:
                    notify_clients(update_data)
                self.last_modified = current_time


def notify_clients(data):
    with clients_lock:
        disconnected = []
        for client in connected_clients:
            try:
                client.send(data)
            except Exception:
                disconnected.append(client)

        for client in disconnected:
            connected_clients.remove(client)
        print(f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {len(data)} –±–∞–π—Ç")


def run_server():
    server = ws_sync.serve(handler, "127.0.0.1", 8765)
    print("üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://127.0.0.1:8765")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    initial_data = load_config()
    if initial_data:
        notify_clients(initial_data)

    # –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ñ–∞–π–ª–æ–º
    observer = Observer()
    event_handler = ConfigFileHandler()
    observer.schedule(event_handler, path=os.path.dirname(CONFIG_FILE) or '.', recursive=False)
    observer.start()
    print("üëÄ –°–ª–µ–∂—É –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ reqwest.json...")

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


# === –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
thread = threading.Thread(target=run_server, daemon=True)
thread.start()
print("üßµ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")